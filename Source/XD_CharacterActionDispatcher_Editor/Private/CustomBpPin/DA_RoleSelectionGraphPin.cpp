// Fill out your copyright notice in the Description page of Project Settings.

#include "DA_RoleSelectionGraphPin.h"
#include "SEditableTextBox.h"
#include "EdGraphSchema_K2.h"
#include "XD_CharacterActionDispatcherType.h"
#include "STextPropertyEditableTextBox.h"
#include "EditorStyleSet.h"

namespace
{
	/** Allows STextPropertyEditableTextBox to edit a graph pin */
	class FEditableTextGraphPin : public IEditableTextProperty
	{
	public:
		FEditableTextGraphPin(UEdGraphPin* InGraphPinObj)
			: GraphPinObj(InGraphPinObj)
		{
		}

		virtual bool IsMultiLineText() const override
		{
			return true;
		}

		virtual bool IsPassword() const override
		{
			return false;
		}

		virtual bool IsReadOnly() const override
		{
			return GraphPinObj->bDefaultValueIsReadOnly;
		}

		virtual bool IsDefaultValue() const override
		{
			FString TextAsString;
			FTextStringHelper::WriteToBuffer(TextAsString, GraphPinObj->DefaultTextValue);
			return TextAsString.Equals(GraphPinObj->AutogeneratedDefaultValue, ESearchCase::CaseSensitive);
		}

		virtual FText GetToolTipText() const override
		{
			return FText::GetEmpty();
		}

		virtual int32 GetNumTexts() const override
		{
			return 1;
		}

		virtual FText GetText(const int32 InIndex) const override
		{
			check(InIndex == 0);

			if (GraphPinObj->DefaultValue.Len() > 0)
			{
				FDA_RoleSelection Selection = FDA_RoleSelection();
				UScriptStruct* DA_RoleSelectionType = FDA_RoleSelection::StaticStruct();
				DA_RoleSelectionType->ImportText(*GraphPinObj->DefaultValue, &Selection, nullptr, 0, nullptr, DA_RoleSelectionType->GetName());
				return Selection.Selection;
			}
			return FText::GetEmpty();
		}

		virtual void SetText(const int32 InIndex, const FText& InText) override
		{
			check(InIndex == 0);
			const FScopedTransaction Transaction(NSLOCTEXT("XD_CharacterActionDispatcherModule", "设置选项文本描述", "设置选项文本"));

			FDA_RoleSelection Selection = FDA_RoleSelection();
			UScriptStruct* DA_RoleSelectionType = FDA_RoleSelection::StaticStruct();

			if (GraphPinObj->DefaultValue.Len() > 0)
			{
				DA_RoleSelectionType->ImportText(*GraphPinObj->DefaultValue, &Selection, nullptr, 0, nullptr, DA_RoleSelectionType->GetName());
			}
			Selection.Selection = InText;

			GraphPinObj->Modify();
			GraphPinObj->DefaultValue.Empty();
			DA_RoleSelectionType->ExportText(GraphPinObj->DefaultValue, &Selection, nullptr, nullptr, 0, nullptr);
		}

		virtual bool IsValidText(const FText& InText, FText& OutErrorMsg) const override
		{
			return true;
		}

#if USE_STABLE_LOCALIZATION_KEYS
		virtual void GetStableTextId(const int32 InIndex, const ETextPropertyEditAction InEditAction, const FString& InTextSource, const FString& InProposedNamespace, const FString& InProposedKey, FString& OutStableNamespace, FString& OutStableKey) const override
		{
			check(InIndex == 0);
			return StaticStableTextId(GraphPinObj->GetOwningNodeUnchecked(), InEditAction, InTextSource, InProposedNamespace, InProposedKey, OutStableNamespace, OutStableKey);
		}
#endif // USE_STABLE_LOCALIZATION_KEYS

		virtual void RequestRefresh() override
		{
		}

	private:
		UEdGraphPin* GraphPinObj;
	};
}

TSharedPtr<class SGraphPin> FDA_RoleSelectionGraphPinFactory::CreatePin(class UEdGraphPin* InPin) const
{
	if (InPin->PinType.PinCategory == UEdGraphSchema_K2::PC_Struct
		&& InPin->PinType.PinSubCategoryObject == FDA_RoleSelection::StaticStruct())
	{
		return SNew(SDA_RoleSelectionGraphPin, InPin);
	}
	return nullptr;
}

void SDA_RoleSelectionGraphPin::Construct(const FArguments& InArgs, UEdGraphPin* InGraphPinObj)
{
	SGraphPin::Construct(SGraphPin::FArguments(), InGraphPinObj);
}

TSharedRef<SWidget> SDA_RoleSelectionGraphPin::GetDefaultValueWidget()
{
	return SNew(STextPropertyEditableTextBox, MakeShareable(new FEditableTextGraphPin(GraphPinObj)))
		.Style(FEditorStyle::Get(), "Graph.EditableTextBox")
		.Visibility(this, &SGraphPin::GetDefaultValueVisibility)
		.ForegroundColor(FSlateColor::UseForeground())
		.WrapTextAt(400)
		.MinDesiredWidth(18.0f)
		.MaxDesiredHeight(200);
}
